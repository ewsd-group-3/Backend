// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Staff {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  role              Role                @default(STAFF)
  isActive          Boolean             @default(true)
  department        Department          @relation(fields: [departmentId], references: [id])
  departmentId      Int
  ideas             Idea[]
  views             View[]
  comments          Comment[]
  votes             Vote[]
  tokens            Token[]
  announcements     Announcement[]
  staffAnnouncement StaffAnnouncement[]
  loginHistory      LoginHistory[]
  // ideaBy            Report[]           @relation("ideaBy")
  report            Report[]           @relation("reportBy")
  // approved          Report[]           @relation("approvedBy")
  lastLoginDate     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())@updatedAt
}

model Token {
  id          Int         @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  staff       Staff       @relation(fields: [staffId], references: [id])
  staffId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model Department {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  staff       Staff[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  isActive        Boolean         @default(true)
  ideaCategories  IdeaCategory[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())@updatedAt
}

model Idea {
  id              Int             @id @default(autoincrement())
  title           String          
  description     String          @db.LongText
  isAnonymous     Boolean         @default(false)
  isHidden        Boolean         @default(false)
  author          Staff           @relation(fields: [authorId], references: [id])
  authorId        Int
  semester        Semester        @relation(fields: [semesterId], references: [id])
  semesterId      Int
  comments        Comment[]
  votes           Vote[]
  views           View[]
  ideaDocuments   IdeaDocument[]
  ideaCategories  IdeaCategory[]
  report          Report[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())@updatedAt
}

model IdeaCategory {
  id          Int       @id @default(autoincrement())
  idea        Idea      @relation(fields: [ideaId], references: [id])
  ideaId      Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())@updatedAt
}

model IdeaDocument {
  id                  Int         @id @default(autoincrement())
  name                String
  documenttype        String
  documentDownloadUrl String
  documentDeleteUrl   String
  idea                Idea        @relation(fields: [ideaId], references: [id])
  ideaId              Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())@updatedAt
}

model Vote {
  id          Int         @id @default(autoincrement())
  isThumbUp   Boolean
  staff       Staff       @relation(fields: [staffId], references: [id])
  staffId     Int
  idea        Idea        @relation(fields: [ideaId], references: [id])
  ideaId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model Comment {
  id          Int         @id @default(autoincrement())
  content     String
  isAnonymous Boolean     @default(false)
  staff       Staff       @relation(fields: [staffId], references: [id])
  staffId     Int
  idea        Idea        @relation(fields: [ideaId], references: [id])
  ideaId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model View {
  id          Int         @id @default(autoincrement())
  staff       Staff       @relation(fields: [staffId], references: [id])
  staffId     Int
  idea        Idea        @relation(fields: [ideaId], references: [id])
  ideaId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model AcademicInfo {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  startDate   DateTime
  endDate     DateTime
  semesters   Semester[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())@updatedAt
}

model Semester {
  id                Int           @id @default(autoincrement())
  name              String
  startDate         DateTime
  closureDate       DateTime
  finalClosureDate  DateTime
  academicInfo      AcademicInfo  @relation(fields: [academicInfoId], references: [id])
  academicInfoId    Int
  ideas             Idea[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())@updatedAt
}

// Additional
model Announcement {
  id          Int                 @id @default(autoincrement())
  subject     String
  content     String              @db.LongText
  type        AudienceType
  announcer   Staff               @relation(fields: [announcerId], references: [id])
  announcerId Int
  audiences   StaffAnnouncement[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
}

model StaffAnnouncement {
  id              Int                         @id @default(autoincrement())
  status          StaffAnnouncementStatus     @default(PENDING)
  staff           Staff                       @relation(fields: [staffId], references: [id])
  staffId         Int
  departmentId    Int
  announcement    Announcement                @relation(fields: [announcementId], references: [id])
  announcementId  Int
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @default(now()) @updatedAt
}

model LoginHistory {
  id              Int           @id @default(autoincrement())
  browserName     String
  staff           Staff         @relation(fields: [staffId], references: [id])
  staffId         Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}

model PageView {
  id              Int           @id @default(autoincrement())
  url             String
  count           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}

model Report {
  id              Int           @id @default(autoincrement())
  reason          String
  isApproved      Boolean       @default(false)
  approvedAt      DateTime?     
  idea            Idea          @relation(fields: [ideaId], references: [id])
  ideaId          Int  
  // ideaBy          Staff         @relation("ideaBy", fields: [ideaById], references: [id])
  // ideaById        Int
  reportBy        Staff         @relation("reportBy", fields: [reportById], references: [id])
  reportById      Int
  // approvedBy      Staff         @relation("approvedBy", fields: [approvedById], references: [id])
  approvedById    Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}

enum Role {
  STAFF
  ADMIN
  QA_MANAGER
  QA_COORDINATOR
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum AudienceType {
  ALL
  SPECIFIC
}

enum Status {
  PENDING
  ACTIVE
  DONE
  FAILED
}

enum StaffAnnouncementStatus {
  PENDING
  SUCCESS
  FAIL
}
